// <auto-generated />
using System;
using Assessments.ExpenseManagement.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Assessments.ExpenseManagement.Infrastructure.Migrations
{
    [DbContext(typeof(ExpenseDbContext))]
    partial class ExpenseDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Assessments.ExpenseManagement.Domain.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0f3043bb-4be9-4899-9cc5-d8250fad73df"),
                            Name = "Hotel"
                        },
                        new
                        {
                            Id = new Guid("39c3d33b-cd7e-4f64-abb4-465f91baef1b"),
                            Name = "Restaurant"
                        },
                        new
                        {
                            Id = new Guid("3afbdad9-6c02-47ac-aa87-4a85f3a1a1ca"),
                            Name = "Travel"
                        });
                });

            modelBuilder.Entity("Assessments.ExpenseManagement.Domain.Models.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c97190a9-6d94-40f4-bb67-57e658678511"),
                            Code = "EUR",
                            Symbol = "€"
                        },
                        new
                        {
                            Id = new Guid("ff724b35-1947-4654-9700-e25d2b31dc7c"),
                            Code = "USD",
                            Symbol = "$"
                        });
                });

            modelBuilder.Entity("Assessments.ExpenseManagement.Domain.Models.Expense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateOnly>("ExecutionDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("SubmissionDate")
                        .HasColumnType("date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("UserId");

                    b.HasIndex("Amount", "ExecutionDate", "UserId")
                        .IsUnique();

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("Assessments.ExpenseManagement.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("FirstName", "LastName");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d1f8b2c3-4e5f-4a6b-8c9d-0e1f2a3b4c5d"),
                            CurrencyId = new Guid("c97190a9-6d94-40f4-bb67-57e658678511"),
                            FirstName = "Jane",
                            LastName = "DOE"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-7a8b-9c0d-1e2f3a4b5c6d"),
                            CurrencyId = new Guid("ff724b35-1947-4654-9700-e25d2b31dc7c"),
                            FirstName = "John",
                            LastName = "DOE"
                        });
                });

            modelBuilder.Entity("Assessments.ExpenseManagement.Domain.Models.Expense", b =>
                {
                    b.HasOne("Assessments.ExpenseManagement.Domain.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Assessments.ExpenseManagement.Domain.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Assessments.ExpenseManagement.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Currency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Assessments.ExpenseManagement.Domain.Models.User", b =>
                {
                    b.HasOne("Assessments.ExpenseManagement.Domain.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Currency");
                });
#pragma warning restore 612, 618
        }
    }
}
