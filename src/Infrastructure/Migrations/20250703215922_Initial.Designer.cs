// <auto-generated />
using System;
using System.Collections.Generic;
using Assessments.ExpenseManagement.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Assessments.ExpenseManagement.Infrastructure.Migrations
{
    [DbContext(typeof(ExpenseDbContext))]
    [Migration("20250703215922_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Assessments.ExpenseManagement.Domain.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5405fde5-ee32-497f-905e-6926ad66c233"),
                            Name = "Hotel"
                        },
                        new
                        {
                            Id = new Guid("46af734f-2312-4351-96cd-9705a4cf90eb"),
                            Name = "Restaurant"
                        },
                        new
                        {
                            Id = new Guid("cde30ccd-b5f0-442b-bcd0-c73cdd036f00"),
                            Name = "Travel"
                        });
                });

            modelBuilder.Entity("Assessments.ExpenseManagement.Domain.Models.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2a20ef19-6a03-48ac-9b42-6a0b2cdb7c80"),
                            Code = "CNY",
                            Name = "Chinese Yuan",
                            Symbol = "¥"
                        },
                        new
                        {
                            Id = new Guid("4b21486c-9517-494b-a324-6132f32fb1c9"),
                            Code = "EUR",
                            Name = "Euro",
                            Symbol = "€"
                        },
                        new
                        {
                            Id = new Guid("fdb8bbd1-6322-47a4-bb0f-4b78f15fda78"),
                            Code = "USD",
                            Name = "United States Dollar",
                            Symbol = "$"
                        });
                });

            modelBuilder.Entity("Assessments.ExpenseManagement.Domain.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("FirstName", "LastName");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-7a8b-9c0d-1e2f3a4b5c6d"),
                            CurrencyId = new Guid("4b21486c-9517-494b-a324-6132f32fb1c9"),
                            FirstName = "Jane",
                            LastName = "Doe"
                        },
                        new
                        {
                            Id = new Guid("d1f8b2c3-4e5f-4a6b-8c9d-0e1f2a3b4c5d"),
                            CurrencyId = new Guid("fdb8bbd1-6322-47a4-bb0f-4b78f15fda78"),
                            FirstName = "John",
                            LastName = "Doe"
                        });
                });

            modelBuilder.Entity("Assessments.ExpenseManagement.Domain.Models.Expense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("ExecutionDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateOnly>("SubmissionDate")
                        .HasColumnType("date");

                    b.ComplexProperty<Dictionary<string, object>>("EmployeeInfo", "Assessments.ExpenseManagement.Domain.Models.Expense.EmployeeInfo#EmployeeInfo", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");
                        });

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("Assessments.ExpenseManagement.Domain.Models.Receipt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("ExpenseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseId");

                    b.HasIndex("FileUrl")
                        .IsUnique();

                    b.ToTable("Receipts");
                });

            modelBuilder.Entity("Assessments.ExpenseManagement.Domain.Models.Employee", b =>
                {
                    b.HasOne("Assessments.ExpenseManagement.Domain.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("Assessments.ExpenseManagement.Domain.Models.Expense", b =>
                {
                    b.HasOne("Assessments.ExpenseManagement.Domain.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Assessments.ExpenseManagement.Domain.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Assessments.ExpenseManagement.Domain.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");

                    b.Navigation("Currency");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Assessments.ExpenseManagement.Domain.Models.Receipt", b =>
                {
                    b.HasOne("Assessments.ExpenseManagement.Domain.Models.Expense", null)
                        .WithMany("Receipts")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Assessments.ExpenseManagement.Domain.Models.Expense", b =>
                {
                    b.Navigation("Receipts");
                });
#pragma warning restore 612, 618
        }
    }
}
